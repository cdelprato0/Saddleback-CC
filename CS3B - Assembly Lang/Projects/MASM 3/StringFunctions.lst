Microsoft (R) Macro Assembler Version 6.14.8444		    05/10/18 14:51:39
StringFunctions.asm					     Page 1 - 1


				;**********************************************************************************************************
				; Program Name: MASM 3 - StringFunctions
				; Programmer:   Chaz Del Prato
				; Class:        CS3B T/Th 3:30pm
				; Date:         April 17, 2018
				; Purpose:
				;   The string funtions extenal file.
				;**********************************************************************************************************    

				    ;Includes Irvine Libaray
				    INCLUDE ..\..\Irvine\Irvine32.inc   
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				    ;Bailey macros
				    ascint32         PROTO Near32 stdcall, lpStringToConvert:dword
				    ExitProcess      PROTO,dwExitCode:dword
				    getstring        PROTO Near32 stdcall, lpStringToGet:dword, dlength:dword
				    hexToChar        PROTO Near32 stdcall, lpDestStr:dword, lpSourceStr:dword, dLen:dword
				    intasc32Comma    PROTO Near32 stdcall, lpStringToHold:dword, dval:dword
				    putstring        PROTO Near32 stdcall, lpStringToPrint:dword
				    putch            PROTO Near32 stdcall, bVal:byte
				    memoryallocBailey PROTO Near32 stdcall, dSize:dword

 00000000			    .data

				    
 00000000			    .code

				;***********************************************************************************************
				; Name: String_Length
				;
				; Purpose:
				;  This method accepts the address of a string and counts the characters in the string, 
				;   excluding the NULL character and returns that value as an int (dword) in the EAX register.  
				;   Write this method as an “internal” method below your driver. Just after PUBLIC _start  put 
				;   the comment block for the method. Then make sure your proc is placed BEFORE your END 
				;   statement.  This method will be used for many of the methods below and making it an internal 
				;   method will prevent conflicts.
				;***********************************************************************************************
 00000000			String_Length PROC

 = [ebp + 8]			x_param EQU [ebp + 8]

 00000000  55			    push ebp
 00000001  8B EC		    mov ebp, esp

 00000003  56			    push esi                ;saves all registers
 00000004  53			    push ebx

 00000005  B8 00000000		    mov eax, 0
 0000000A  8B 5D 08		    mov ebx, x_param        ;ebx 1st string
 0000000D  BE 00000000		    mov esi, 0              ;esi indexes into the strings

 00000012			beginWhile:
 00000012  80 3C 1E 00		    cmp BYTE PTR[ebx + esi],0   ;reached end of the string
 00000016  74 04		    je endWhile                 ;exit loop
 00000018  40			    inc eax                     ;length++
 00000019  46			    inc esi
 0000001A  EB F6		    jmp beginWhile
 0000001C			endWhile:

 0000001C  8B C6		    mov EAX, ESI
 0000001E  5B			    pop EBX
 0000001F  5E			    pop ESI

 00000020  5D			    pop ebp     ;restores

 00000021  C2 0004		    ret 4        ;cleans up stack

 00000024			String_Length ENDP

				;***********************************************************************************************
				; Name: String_Equals
				;
				; Purpose:
				;  This method makes an exact comparison of individual characters in two strings. If any 
				;   character in the string in a position is different than the character in the same position 
				;   in the other string, the method returns “false” (0  in the AL register). If the length of 
				;   the two strings is different, the method also returns “false”. Note that ‘e’ is NOT the 
				;   same as ‘E’. Otherwise “true” (1) is returned. The value is returned in the AL register.
				;***********************************************************************************************
 00000024			String_Equals PROC

 = [EBP+8]			strString2 EQU [EBP+8]
 = [EBP+12]			strString1 EQU [EBP+12]
 00000024  55			    push EBP
 00000025  8B EC		    mov EBP, ESP

 = WORD PTR [EBP-2]		    sLength1 EQU WORD PTR [EBP-2]
 = WORD PTR [EBP-4]		    sLength2 EQU WORD PTR [EBP-4]

 00000027  83 EC 04		    sub ESP, 4

 0000002A  56			    push ESI
 0000002B  57			    push EDI
 0000002C  53			    push EBX


 0000002D  B8 00000000		    MOV EAX, 0
 00000032  8B 75 0C		    MOV ESI, strString1
 00000035  56			    push ESI
 00000036  E8 FFFFFFC5		    call String_Length
 0000003B  83 C4 04		    add esp, 4

 0000003E  66| 89 45 FE		    MOV sLength1, AX

 00000042  B8 00000000		    MOV EAX, 0
 00000047  8B 75 08		    MOV ESI, strString2
 0000004A  56			    push ESI
 0000004B  E8 FFFFFFB0		    call String_Length
 00000050  83 C4 04		    add ESP, 4
 00000053  66| 89 45 FC		    MOV sLength2, AX
 00000057  66| B8 0000		    MOV AX, 0

 0000005B  66| 8B 5D FE		    MOV BX, sLength1
 0000005F  66| 3B 5D FC		    cmp BX, sLength2
 00000063  75 21		    jnz exitRoutine

 00000065  8B 5D 0C		    MOV EBX, strString1

 00000068  BF 00000000		    MOV EDI, 0

 0000006D			stLoop:
 0000006D  8A 04 1F		    MOV AL, [EBX+EDI]
 00000070  3A 04 37		    cmp AL, [ESI+EDI]
 00000073  75 07		    jne NotEqual
 00000075  3C 00		    cmp AL, 0
 00000077  74 09		    je AreEqual
 00000079  47			    inc EDI
 0000007A  EB F1		    jmp stLoop

 0000007C			NotEqual:
 0000007C  66| B8 0000		    MOV AX, 0
 00000080  EB 04		    jmp ExitRoutine

 00000082			AreEqual:
 00000082  66| B8 0001		    MOV AX, 1

 00000086			ExitRoutine:
 00000086  5B			    pop EBX
 00000087  5F			    pop EDI
 00000088  5E			    pop ESI

 00000089  8B E5		    MOV ESP, EBP

 0000008B  5D			    POP EBP
				    
 0000008C  C3			    ret
 0000008D			String_Equals ENDP

				;***********************************************************************************************
				; Name: String_EqualsIgnoreCase
				;
				; Purpose:
				;  This method makes a comparison of individual characters in two strings ignoring case. If any 
				;   character in the string in a position is different than the character in the same position 
				;   in the other string, the method returns “false” (0  in the AL register). If the length of 
				;   the two strings is different, the method also returns “false”. Note that ‘e’ is the SAME as 
				;   ‘E’. The value returned is in the AL register.
				;***********************************************************************************************
 0000008D			String_EqualsIgnoreCase PROC

 = [EBP+8]			    strString2 EQU [EBP+8]
 = [EBP+12]			    strString1 EQU [EBP+12]
				    
 0000008D  55			    push EBP
 0000008E  8B EC		    MOV EBP, ESP

 = WORD PTR [EBP - 2]		    sLength1 EQU WORD PTR [EBP - 2]
 = WORD PTR [EBP - 4]		    sLength2 EQU WORD PTR [EBP - 4]
 00000090  83 EC 04		    sub ESP, 4

 00000093  56			    push ESI
 00000094  57			    push EDI
 00000095  53			    push EBX

 00000096  B8 00000000		    MOV EAX, 0
 0000009B  8B 5D 0C		    MOV EBX, strString1
 0000009E  53			    push EBX
 0000009F  E8 FFFFFF5C		    call String_Length
 000000A4  83 C4 04		    add ESP, 4
 000000A7  66| 89 45 FE		    MOV sLength1, AX
 000000AB  B8 00000000		    MOV EAX, 0
				    
 000000B0  8B 75 08		    MOV ESI, strString2
 000000B3  56			    push ESI
 000000B4  E8 FFFFFF47		    call String_Length
 000000B9  83 C4 04		    add ESP, 4
 000000BC  66| 89 45 FC		    MOV sLength2, AX
 000000C0  66| B8 0000		    MOV AX, 0
				    
 000000C4  66| 8B 4D FE		    MOV CX, sLength1
 000000C8  66| 3B 4D FC		    cmp CX, sLength2
 000000CC  75 2A		    jnz exitRoutineIC

 000000CE  BF 00000000		    MOV EDI, 0
 000000D3  BA 00000000		    MOV EDX, 0

 000000D8			stLoopIC:
 000000D8  8A 04 1F		    MOV AL, [EBX + EDI]
 000000DB  0C 20		    OR AL, 00100000b
				    
 000000DD  8A 0C 37		    MOV Cl, [ESI+EDI]
 000000E0  80 C9 20		    OR CL, 00100000b
				    
 000000E3  38 C8		    cmp AL, CL
 000000E5  75 07		    jne NotEqualIC
 000000E7  3C 20		    cmp AL, 00100000b
 000000E9  74 09		    je AreEqualIC
 000000EB  47			    inc EDI
 000000EC  EB EA		    jmp stLoopIC

 000000EE			NotEqualIC:
 000000EE  66| B8 0000		    MOV AX, 0
 000000F2  EB 04		    jmp ExitRoutineIC

 000000F4			AreEqualIC:
 000000F4  66| B8 0001		    MOV AX, 1

 000000F8			ExitRoutineIC:
 000000F8  5B			    pop EBX
 000000F9  5F			    pop EDI
 000000FA  5E			    pop ESI

 000000FB  8B E5		    MOV ESP, EBP

 000000FD  5D			    POP EBP
				    
 000000FE  C3			    ret
 000000FF			String_EqualsIgnoreCase ENDP

				;***********************************************************************************************
				; Name: String_Copy
				;
				; Purpose:
				;  This method accepts a string to copy, allocates dynamically enough storage to hold a copy of 
				;   the new characters, copies the characters and returns the address of that newly created 
				;   string. You will need to INVOKE the  memoryallocBailey method, the UML for which is below. 
				;   I have written this method: you only have to PROTOtype it and INVOKE it.
				;***********************************************************************************************
 000000FF			String_Copy PROC Near32

 000000FF  55			    push ebp
 00000100  8B EC		    mov ebp, esp

 00000102  53			    push ebx
 00000103  56			    push esi
 00000104  57			    push edi

 00000105  8B 75 08		    MOV ESI, [EBP + 8]
 00000108  56			    push esi
 00000109  E8 FFFFFEF2		    call String_Length
 0000010E  89 45 FC		    MOV DWORD PTR[EBP - 4], EAX
 00000111  FF 45 FC		    inc DWORD PTR[EBP - 4]

				    INVOKE memoryallocBailey, DWORD PTR[EBP - 4]

 0000011C  8B F8		    MOV EDI, EAX
 0000011E  BB 00000000		    MOV EBX, 0

 00000123			copy:
 00000123  8A 04 33		    MOV AL, [ESI + EBX]
 00000126  3C 00		    cmp AL, 0
 00000128  74 06		    je copied

 0000012A  88 04 3B		    MOV [EDI + EBX], AL
 0000012D  43			    inc EBX
 0000012E  EB F3		    jmp copy

 00000130			copied:
 00000130  C6 04 3B 00		    mov BYTE PTR[EDI + EBX], 0

 00000134  8B C7		    MOV EAX, EDI
 00000136  5F			    pop edi
 00000137  5E			    pop esi
 00000138  5B			    pop ebx
				    
 00000139  5D			    pop ebp

 0000013A  C2 0004		    ret 4

 0000013D			String_Copy ENDP

				;***********************************************************************************************
				; Name: String_Substring1
				;
				; Purpose:
				;  This method creates a new string consisting of characters from a substring of the passed 
				;   string starting with beginIndex and ending with endIndex.
				;***********************************************************************************************
 0000013D			String_Substring1 PROC
 0000013D  55			    push EBP
 0000013E  8B EC		    MOV EBP, ESP

 00000140  83 EC 04		    sub ESP, 4
 = [EBP - 4]			    sLength1 EQU [EBP - 4]

 00000143  53			    push EBX
 00000144  51			    push ECX
 00000145  52			    push EDX
 00000146  56			    push ESI
 00000147  57			    push EDI
				    
 = [EBP + 16]			    strString1 EQU [EBP + 16]
 = [EBP + 12]			    strFirst1 EQU [EBP + 12]
 = [EBP + 8]			    strLast1 EQU [EBP + 8]

 00000148  8B 5D 10		    MOV EBX, strString1
 0000014B  8B 4D 0C		    MOV ECX, strFirst1
 0000014E  8B 55 08		    MOV EDX, strLast1

 00000151  FF 75 10		    push strString1
 00000154  E8 FFFFFEA7		    call String_Length
 00000159  89 45 FC		    MOV sLength1, EAX

 0000015C  8B 75 08		    MOV ESI, strLast1
 0000015F  2B 75 0C		    sub ESI, strFirst1
 00000162  46			    inc ESI
				    INVOKE memoryallocBailey, ESI
 00000169  8B F8		    MOV EDI, EAX
 0000016B  BE 00000000		    MOV ESI, 0

 00000170			loopSubstring1:
 00000170  03 75 0C		    add ESI, strFirst1
 00000173  8A 04 1E		    MOV AL, [EBX + ESI]
				    
 00000176  3B 75 08		    cmp ESI, strLast1
 00000179  74 09		    je endLoop
				    
 0000017B  2B 75 0C		    sub ESI, strFirst1
 0000017E  88 04 3E		    MOV [EDI + ESI], AL
 00000181  46			    inc ESI
				    
 00000182  EB EC		    jmp loopSubstring1

 00000184			endLoop:
 00000184  C6 04 3E 00		    MOV BYTE PTR[EDI + ESI], 0
 00000188  8B C7		    MOV EAX, EDI
				    
 0000018A  5F			    pop EDI
 0000018B  5E			    pop ESI
 0000018C  5A			    pop EDX
 0000018D  59			    pop ECX
 0000018E  5B			    pop EBX
 0000018F  83 C4 04		    add ESP, 4
 00000192  5D			    pop EBP

 00000193  C2 000C		    ret 12
				    
 00000196			String_Substring1 ENDP

				;***********************************************************************************************
				; Name: String_Substring2
				;
				; Purpose:
				;  This method creates a new string consisting of characters from a substring of the passed 
				;   string starting with beginIndex to the end of the original string.
				;***********************************************************************************************
 00000196			String_Substring2 PROC
 00000196  55			    push EBP
 00000197  8B EC		    MOV EBP, ESP

 00000199  83 EC 04		    sub ESP, 4
 = [EBP - 4]			    sLength1 EQU [EBP - 4]

 0000019C  53			    push EBX
 0000019D  51			    push ECX
 0000019E  56			    push ESI
 0000019F  57			    push EDI
				    
 = [EBP + 12]			    strString1 EQU [EBP + 12]
 = [EBP + 8]			    strFirst1 EQU [EBP + 8]

 000001A0  8B 5D 0C		    MOV EBX, strString1
 000001A3  8B 4D 08		    MOV ECX, strFirst1

 000001A6  FF 75 0C		    push strString1
 000001A9  E8 FFFFFE52		    call String_Length
 000001AE  89 45 FC		    MOV sLength1, EAX

 000001B1  8B 75 FC		    MOV ESI, sLength1
 000001B4  2B 75 08		    sub ESI, strFirst1
 000001B7  46			    inc ESI
				    INVOKE memoryallocBailey, ESI
 000001BE  8B F8		    MOV EDI, EAX
 000001C0  BE 00000000		    MOV ESI, 0

 000001C5			loopSubstring2:
 000001C5  03 75 08		    add ESI, strFirst1
 000001C8  8A 04 1E		    MOV AL, [EBX + ESI]
				    
 000001CB  3B 75 FC		    cmp ESI, sLength1
 000001CE  74 09		    je endLoop2
				    
 000001D0  2B 75 08		    sub ESI, strFirst1
 000001D3  88 04 3E		    MOV [EDI + ESI], AL
 000001D6  46			    inc ESI
				    
 000001D7  EB EC		    jmp loopSubstring2

 000001D9			endLoop2:
 000001D9  C6 04 3E 00		    MOV BYTE PTR[EDI + ESI], 0
 000001DD  8B C7		    MOV EAX, EDI
				    
 000001DF  5F			    pop EDI
 000001E0  5E			    pop ESI
 000001E1  59			    pop ECX
 000001E2  5B			    pop EBX
 000001E3  83 C4 04		    add ESP, 4
 000001E6  5D			    pop EBP

 000001E7  C2 0008		    ret 8
				    
 000001EA			String_Substring2 ENDP

				;***********************************************************************************************
				; Name: String_CharAt
				;
				; Purpose:
				;  This method returns the character in the indicated position. If the request is impossible to 
				;   fulfill, the method returns 0
				;***********************************************************************************************
 000001EA			String_CharAt PROC

 000001EA  55			    push EBP
 000001EB  8B EC		    MOV EBP, ESP

 000001ED  53			    push EBX
 000001EE  51			    push ECX
 000001EF  FF 75 0C		    push [EBP + 12]

 000001F2  E8 FFFFFE09		    call String_Length

 000001F7  83 F8 00		    cmp EAX, 0
 000001FA  74 0E		    je noStringOrDone

 000001FC  B8 00000000		    MOV EAX, 0
 00000201  8B 5D 0C		    MOV EBX, [EBP + 12]
 00000204  8B 4D 08		    MOV ECX, [EBP + 8]
 00000207  8A 04 19		    MOV AL, [EBX + ECX]

 0000020A			noStringOrDone:
 0000020A  59			    pop ECX
 0000020B  5B			    pop EBX
 0000020C  5D			    pop EBP
 0000020D  C2 0008		    ret 8

 00000210			String_CharAt ENDP

				;***********************************************************************************************
				; Name: String_StartsWith1
				;
				; Purpose:
				;  It checks whether the substring (starting from the specified offset index) exists within 
				;   string1. For example testing the string “George Washington” for the prefix “Wash” starting 
				;   in position 7 would return “true” (1) otherwise, it would return false (0) would have is 
				;   having the specified prefix or not.
				;***********************************************************************************************
 00000210			String_StartsWith1 PROC
 00000210  55			    push EBP
 00000211  8B EC		    MOV EBP, ESP

 00000213  53			    push EBX
 00000214  51			    push ECX
 00000215  52			    push EDX
 00000216  56			    push ESI
 00000217  FF 75 0C		    push [EBP + 12]

 0000021A  E8 FFFFFDE1		    call String_Length
 0000021F  89 45 F8		    mov [EBP - 8], EAX      

 00000222  FF 75 10		    push [EBP + 16]
 00000225  E8 FFFFFDD6		    call String_Length
 0000022A  89 45 FC		    MOV [EBP - 4], EAX

 0000022D  8B 45 F8		    MOV EAX, [EBP - 8]

 00000230  8B 5D 08		    MOV EBX, [EBP + 8]
 00000233  B9 00000000		    MOV ECX, 0
 00000238  8B 55 10		    MOV EDX, [EBP + 16]
 0000023B  8B 75 0C		    MOV ESI, [EBP + 12]

 0000023E			loopCheckSW:
 0000023E  8A 04 13		    MOV AL, [EDX + EBX]
 00000241  8A 24 31		    MOV AH, [ESI + ECX]
				    
 00000244  80 FC 00		    cmp AH, 0
 00000247  74 08		    je trueSW1
 00000249  38 E0		    cmp AL, AH
 0000024B  75 08		    jne falseSW1
				    
 0000024D  43			    inc EBX
 0000024E  41			    inc ECX
 0000024F  EB ED		    jmp loopCheckSW

 00000251			trueSW1: 
 00000251  B0 01		    MOV AL, 1
 00000253  EB 04		    jmp done

 00000255			falseSW1:
 00000255  B0 00		    MOV AL, 0
 00000257  EB 00		    jmp done

 00000259			done:
 00000259  5E			    pop ESI
 0000025A  5A			    pop EDX
 0000025B  59			    pop ECX
 0000025C  5B			    pop EBX
 0000025D  5D			    pop EBP

 0000025E  C2 000C		    ret 12
 00000261			String_StartsWith1 ENDP

				;***********************************************************************************************
				; Name: String_StartsWith2
				;
				; Purpose:
				;  It tests whether string1 begins with the specified prefix. If yes then it returns true else false.
				;***********************************************************************************************
 00000261			String_StartsWith2 PROC
 00000261  55			    push EBP
 00000262  8B EC		    MOV EBP, ESP

 00000264  53			    push EBX
 00000265  51			    push ECX
 00000266  52			    push EDX
				    
 00000267  FF 75 08		    push [EBP + 8]
 0000026A  E8 FFFFFD91		    call String_Length
 0000026F  89 45 F8		    mov [EBP - 8], EAX      

 00000272  FF 75 0C		    push [EBP + 12]
 00000275  E8 FFFFFD86		    call String_Length
 0000027A  89 45 FC		    MOV [EBP - 4], EAX

 0000027D  8B 45 F8		    MOV EAX, [EBP - 8]
 00000280  BB 00000000		    MOV EBX, 0
 00000285  8B 4D 08		    MOV ECX, [EBP + 8]
 00000288  8B 55 0C		    MOV EDX, [EBP + 12]

 0000028B			loopCheckSW2:
 0000028B  8A 04 13		    MOV AL, [EDX + EBX]
 0000028E  8A 24 0B		    MOV AH, [ECX + EBX]
				    
 00000291  80 FC 00		    cmp AH, 0
 00000294  74 07		    je trueSW2
 00000296  38 E0		    cmp AL, AH
 00000298  75 07		    jne falseSW2
				    
 0000029A  43			    inc EBX
 0000029B  EB EE		    jmp loopCheckSW2

 0000029D			trueSW2: 
 0000029D  B0 01		    MOV AL, 1
 0000029F  EB 04		    jmp doneSW2

 000002A1			falseSW2:
 000002A1  B0 00		    MOV AL, 0
 000002A3  EB 00		    jmp doneSW2

 000002A5			doneSW2:
 000002A5  5A			    pop EDX
 000002A6  59			    pop ECX
 000002A7  5B			    pop EBX
 000002A8  5D			    pop EBP

 000002A9  C2 0008		    ret 8
 000002AC			String_StartsWith2 ENDP

				;***********************************************************************************************
				; Name: String_EndsWith
				;
				; Purpose:
				;  Checks whether the string ends with the specified suffix.
				;***********************************************************************************************
 000002AC			String_EndsWith PROC
 000002AC  55			    push EBP
 000002AD  8B EC		    MOV EBP, ESP

 000002AF  53			    push EBX
 000002B0  51			    push ECX
 000002B1  52			    push EDX
 000002B2  56			    push ESI

 000002B3  FF 75 08		    push [EBP + 8]
 000002B6  E8 FFFFFD45		    call String_Length
 000002BB  89 45 F8		    MOV [EBP - 8], EAX

 000002BE  FF 75 0C		    push [EBP + 12]
 000002C1  E8 FFFFFD3A		    call String_Length
 000002C6  89 45 FC		    MOV [EBP - 4], EAX

 000002C9  8B 45 F8		    MOV EAX, [EBP - 8]
 000002CC  8B 5D FC		    MOV EBX, [EBP - 4]
 000002CF  2B 5D F8		    SUB EBX, [EBP - 8]
 000002D2  B9 00000000		    MOV ECX, 0
 000002D7  8B 75 0C		    MOV ESI, [EBP + 12]
 000002DA  8B 55 08		    MOV EDX, [EBP + 8]

 000002DD			loopEndsWith:
 000002DD  8A 04 33		    MOV AL, [ESI + EBX]
 000002E0  8A 24 11		    MOV AH, [EDX + ECX]
				    
 000002E3  80 FC 00		    cmp AH, 0
 000002E6  74 08		    je trueEW
 000002E8  38 E0		    cmp AL, AH
 000002EA  75 08		    jne falseEW

 000002EC  43			    inc EBX
 000002ED  41			    inc ECX
 000002EE  EB ED		    jmp loopEndsWith

 000002F0			trueEW:
 000002F0  B0 01		    MOV AL, 1
 000002F2  EB 04		    jmp doneEW

 000002F4			falseEW:
 000002F4  B0 00		    MOV AL, 0
 000002F6  EB 00		    jmp doneEW

 000002F8			doneEW:
 000002F8  5E			    pop ESI
 000002F9  5A			    pop EDX
 000002FA  59			    pop ECX
 000002FB  5B			    pop EBX
 000002FC  5D			    pop EBP

 000002FD  C2 0008		    ret 8
 00000300			String_EndsWith ENDP

				END
Microsoft (R) Macro Assembler Version 6.14.8444		    05/10/18 14:51:39
StringFunctions.asm					     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	  00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000000 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000300 Para	  Public  'CODE'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
String_CharAt  . . . . . . . . .	P Near	 000001EA _TEXT	Length= 00000026 Public STDCALL
  noStringOrDone . . . . . . . .	L Near	 0000020A _TEXT	
String_Copy  . . . . . . . . . .	P Near	 000000FF _TEXT	Length= 0000003E Public STDCALL
  copy . . . . . . . . . . . . .	L Near	 00000123 _TEXT	
  copied . . . . . . . . . . . .	L Near	 00000130 _TEXT	
String_EndsWith  . . . . . . . .	P Near	 000002AC _TEXT	Length= 00000054 Public STDCALL
  loopEndsWith . . . . . . . . .	L Near	 000002DD _TEXT	
  trueEW . . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  falseEW  . . . . . . . . . . .	L Near	 000002F4 _TEXT	
  doneEW . . . . . . . . . . . .	L Near	 000002F8 _TEXT	
String_EqualsIgnoreCase  . . . .	P Near	 0000008D _TEXT	Length= 00000072 Public STDCALL
  stLoopIC . . . . . . . . . . .	L Near	 000000D8 _TEXT	
  NotEqualIC . . . . . . . . . .	L Near	 000000EE _TEXT	
  AreEqualIC . . . . . . . . . .	L Near	 000000F4 _TEXT	
  ExitRoutineIC  . . . . . . . .	L Near	 000000F8 _TEXT	
String_Equals  . . . . . . . . .	P Near	 00000024 _TEXT	Length= 00000069 Public STDCALL
  stLoop . . . . . . . . . . . .	L Near	 0000006D _TEXT	
  NotEqual . . . . . . . . . . .	L Near	 0000007C _TEXT	
  AreEqual . . . . . . . . . . .	L Near	 00000082 _TEXT	
  ExitRoutine  . . . . . . . . .	L Near	 00000086 _TEXT	
String_Length  . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000024 Public STDCALL
  beginWhile . . . . . . . . . .	L Near	 00000012 _TEXT	
  endWhile . . . . . . . . . . .	L Near	 0000001C _TEXT	
String_StartsWith1 . . . . . . .	P Near	 00000210 _TEXT	Length= 00000051 Public STDCALL
  loopCheckSW  . . . . . . . . .	L Near	 0000023E _TEXT	
  trueSW1  . . . . . . . . . . .	L Near	 00000251 _TEXT	
  falseSW1 . . . . . . . . . . .	L Near	 00000255 _TEXT	
  done . . . . . . . . . . . . .	L Near	 00000259 _TEXT	
String_StartsWith2 . . . . . . .	P Near	 00000261 _TEXT	Length= 0000004B Public STDCALL
  loopCheckSW2 . . . . . . . . .	L Near	 0000028B _TEXT	
  trueSW2  . . . . . . . . . . .	L Near	 0000029D _TEXT	
  falseSW2 . . . . . . . . . . .	L Near	 000002A1 _TEXT	
  doneSW2  . . . . . . . . . . .	L Near	 000002A5 _TEXT	
String_Substring1  . . . . . . .	P Near	 0000013D _TEXT	Length= 00000059 Public STDCALL
  loopSubstring1 . . . . . . . .	L Near	 00000170 _TEXT	
  endLoop  . . . . . . . . . . .	L Near	 00000184 _TEXT	
String_Substring2  . . . . . . .	P Near	 00000196 _TEXT	Length= 00000054 Public STDCALL
  loopSubstring2 . . . . . . . .	L Near	 000001C5 _TEXT	
  endLoop2 . . . . . . . . . . .	L Near	 000001D9 _TEXT	
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ascint32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
getstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
hexToChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
intasc32Comma  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
memoryallocBailey  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
putch  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
putstring  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
sLength1 . . . . . . . . . . . .	Text   	 [EBP - 4]
sLength2 . . . . . . . . . . . .	Text   	 WORD PTR [EBP - 4]
strFirst1  . . . . . . . . . . .	Text   	 [EBP + 8]
strLast1 . . . . . . . . . . . .	Text   	 [EBP + 8]
strString1 . . . . . . . . . . .	Text   	 [EBP + 12]
strString2 . . . . . . . . . . .	Text   	 [EBP+8]
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x_param  . . . . . . . . . . . .	Text   	 [ebp + 8]
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
