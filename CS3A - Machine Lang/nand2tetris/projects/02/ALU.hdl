// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

  PARTS:
    //ALU Part A       

	Not( in = zx, out = x1 );

	And16( a[15]=x1, a[14]=x1, a[13]=x1, a[12]=x1, a[11]=x1, a[10]=x1, a[9]=x1, a[8]=x1, a[7]=x1, a[6]=x1, a[5]=x1, a[4]=x1, a[3]=x1, a[2]=x1, a[1]=x1, a[0]=x1, b=x, out=x2 );


	Invert16( in = x2, invert = nx, out = x3 );



  
      
    //ALU Part B
    
	Not( in = zy, out = y1 );

	And16( a[15]=y1, a[14]=y1, a[13]=y1, a[12]=y1, a[11]=y1, a[10]=y1, a[9]=y1, a[8]=y1, a[7]=y1, a[6]=y1, a[5]=y1, a[4]=y1, a[3]=y1, a[2]=y1, a[1]=y1, a[0]=y1, b=y, out=y2 );

  
	Invert16( in = y2, invert = ny, out = y3 );



   
     
    //ALU Part C
    
	Add16( a = x3, b = y3, out = xPlusy );


        

    //ALU Part D  
      
	And16( a = y3, b = x3, out = xAndy );


        

    //ALU Part E  
     
	Mux16( a = xAndy, b = xPlusy, sel = f, out = PlusOrAnd );
        
	Invert16( in = PlusOrAnd, invert = no, out = pout );


        

    //ALU Part F  
     
	Nor16Way( in = pout, out = zr );
        
	Buf16( in = pout, out = out );















}